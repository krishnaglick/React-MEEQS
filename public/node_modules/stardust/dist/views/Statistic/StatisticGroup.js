'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propUtils = require('../../utils/propUtils');

var _semanticUtils = require('../../utils/semanticUtils');

var sui = _interopRequireWildcard(_semanticUtils);

var _numberToWord = require('../../utils/numberToWord');

var _numberToWord2 = _interopRequireDefault(_numberToWord);

var _Meta = require('../../utils/Meta');

var _Meta2 = _interopRequireDefault(_Meta);

var _Statistic = require('./Statistic');

var _Statistic2 = _interopRequireDefault(_Statistic);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function StatisticGroup(props) {
  var children = props.children;
  var className = props.className;
  var horizontal = props.horizontal;
  var items = props.items;
  var widths = props.widths;

  var classes = (0, _classnames2.default)('ui', (0, _propUtils.useKeyOnly)(horizontal, 'horizontal'), (0, _numberToWord2.default)(widths), className, 'statistics');
  var rest = (0, _propUtils.getUnhandledProps)(StatisticGroup, props);

  if (!items) {
    return _react2.default.createElement(
      'div',
      _extends({}, rest, { className: classes }),
      children
    );
  }

  var itemsJSX = [];

  items.forEach(function (item, index) {
    var key = item.label + '-' + item.value + '-' + index;
    itemsJSX.push(_react2.default.createElement(_Statistic2.default, _extends({ key: key }, item)));
  });

  return _react2.default.createElement(
    'div',
    _extends({}, rest, { className: classes }),
    itemsJSX
  );
}

StatisticGroup._meta = {
  library: _Meta2.default.library.semanticUI,
  name: 'StatisticGroup',
  type: _Meta2.default.type.view,
  parent: 'Statistic',
  props: {
    widths: sui.widths
  }
};

StatisticGroup.propTypes = {
  /** Primary content of the StatisticGroup. */
  children: _propUtils.customPropTypes.all([_propUtils.customPropTypes.mutuallyExclusive(['content']), _react.PropTypes.node]),

  /** Classes that will be added to the StatisticGroup className. */
  className: _react.PropTypes.string,

  /** A statistic can present its measurement horizontally. */
  horizontal: _react.PropTypes.bool,

  /** Array of props for Statistic. */
  items: _propUtils.customPropTypes.all([_propUtils.customPropTypes.mutuallyExclusive(['children']), _react.PropTypes.array]),

  /** A statistic group can have its items divided evenly. */
  widths: _react.PropTypes.oneOf(StatisticGroup._meta.props.widths)
};

exports.default = StatisticGroup;