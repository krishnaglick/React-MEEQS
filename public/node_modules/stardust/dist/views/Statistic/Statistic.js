'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _without2 = require('lodash/without');

var _without3 = _interopRequireDefault(_without2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propUtils = require('../../utils/propUtils');

var _semanticUtils = require('../../utils/semanticUtils');

var sui = _interopRequireWildcard(_semanticUtils);

var _Meta = require('../../utils/Meta');

var _Meta2 = _interopRequireDefault(_Meta);

var _StatisticGroup = require('./StatisticGroup');

var _StatisticGroup2 = _interopRequireDefault(_StatisticGroup);

var _StatisticLabel = require('./StatisticLabel');

var _StatisticLabel2 = _interopRequireDefault(_StatisticLabel);

var _StatisticValue = require('./StatisticValue');

var _StatisticValue2 = _interopRequireDefault(_StatisticValue);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Statistic(props) {
  var children = props.children;
  var className = props.className;
  var color = props.color;
  var floated = props.floated;
  var horizontal = props.horizontal;
  var inverted = props.inverted;
  var label = props.label;
  var size = props.size;
  var text = props.text;
  var value = props.value;

  var classes = (0, _classnames2.default)('ui', color, (0, _propUtils.useValueAndKey)(floated, 'floated'), (0, _propUtils.useKeyOnly)(horizontal, 'horizontal'), (0, _propUtils.useKeyOnly)(inverted, 'inverted'), size, className, 'statistic');
  var rest = (0, _propUtils.getUnhandledProps)(Statistic, props);

  if (children) {
    return _react2.default.createElement(
      'div',
      _extends({}, rest, { className: classes }),
      children
    );
  }

  return _react2.default.createElement(
    'div',
    _extends({}, rest, { className: classes }),
    _react2.default.createElement(
      Statistic.Value,
      { text: text },
      value
    ),
    _react2.default.createElement(
      Statistic.Label,
      null,
      label
    )
  );
}

Statistic._meta = {
  library: _Meta2.default.library.semanticUI,
  name: 'Statistic',
  type: _Meta2.default.type.view,
  props: {
    color: sui.colors,
    floated: sui.floats,
    size: (0, _without3.default)(sui.sizes, 'big', 'massive', 'medium')
  }
};

Statistic.propTypes = {
  /** Primary content of the Statistic. */
  children: _propUtils.customPropTypes.all([_propUtils.customPropTypes.mutuallyExclusive(['label', 'value']), _propUtils.customPropTypes.ofComponentTypes(['StatisticLabel', 'StatisticValue'])]),

  /** Classes that will be added to the Statistic className. */
  className: _react.PropTypes.string,

  /** A statistic can be formatted to be different colors. */
  color: _react.PropTypes.oneOf(Statistic._meta.props.color),

  /** A statistic can sit to the left or right of other content. */
  floated: _react.PropTypes.oneOf(Statistic._meta.props.floated),

  /** A statistic can present its measurement horizontally. */
  horizontal: _react.PropTypes.bool,

  /** A statistic can be formatted to fit on a dark background. */
  inverted: _react.PropTypes.bool,

  /** Label content of the Statistic. Mutually exclusive with the children prop. */
  label: _propUtils.customPropTypes.all([_propUtils.customPropTypes.mutuallyExclusive(['children']), _react.PropTypes.node]),

  /** A statistic can vary in size. */
  size: _react.PropTypes.oneOf(Statistic._meta.props.size),

  /** Format the StatisticValue with smaller font size to fit nicely beside number values. */
  text: _react.PropTypes.bool,

  /** Value content of the Statistic. Mutually exclusive with the children prop. */
  value: _propUtils.customPropTypes.all([_propUtils.customPropTypes.mutuallyExclusive(['children']), _react.PropTypes.node])
};

Statistic.Group = _StatisticGroup2.default;
Statistic.Label = _StatisticLabel2.default;
Statistic.Value = _StatisticValue2.default;

exports.default = Statistic;