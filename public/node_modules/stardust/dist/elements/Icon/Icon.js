'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Meta = require('../../utils/Meta');

var _Meta2 = _interopRequireDefault(_Meta);

var _semanticUtils = require('../../utils/semanticUtils');

var sui = _interopRequireWildcard(_semanticUtils);

var _propUtils = require('../../utils/propUtils');

var _IconGroup = require('./IconGroup');

var _IconGroup2 = _interopRequireDefault(_IconGroup);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An icon is a glyph used to represent something else
 */
function Icon(props) {
  var bordered = props.bordered;
  var className = props.className;
  var circular = props.circular;
  var color = props.color;
  var corner = props.corner;
  var disabled = props.disabled;
  var fitted = props.fitted;
  var flipped = props.flipped;
  var inverted = props.inverted;
  var link = props.link;
  var loading = props.loading;
  var name = props.name;
  var rotated = props.rotated;
  var size = props.size;


  var classes = (0, _classnames2.default)(size, color, (0, _propUtils.useKeyOnly)(bordered, 'bordered'), (0, _propUtils.useKeyOnly)(circular, 'circular'), (0, _propUtils.useKeyOnly)(corner, 'corner'), (0, _propUtils.useKeyOnly)(disabled, 'disabled'), (0, _propUtils.useKeyOnly)(fitted, 'fitted'), (0, _propUtils.useValueAndKey)(flipped, 'flipped'), (0, _propUtils.useKeyOnly)(inverted, 'inverted'), (0, _propUtils.useKeyOnly)(link, 'link'), (0, _propUtils.useKeyOnly)(loading, 'loading'), (0, _propUtils.useValueAndKey)(rotated, 'rotated'), name, className, 'icon');

  var rest = (0, _propUtils.getUnhandledProps)(Icon, props);

  return _react2.default.createElement('i', _extends({ className: classes }, rest));
}

Icon.Group = _IconGroup2.default;

Icon._meta = {
  library: _Meta2.default.library.semanticUI,
  name: 'Icon',
  type: _Meta2.default.type.element,
  props: {
    color: sui.colors,
    flipped: ['horizontally', 'vertically'],
    name: sui.icons,
    rotated: ['clockwise', 'counterclockwise'],
    size: sui.sizes
  }
};

Icon.propTypes = {
  /** Formatted to appear bordered */
  bordered: _react.PropTypes.bool,

  /** Class names for custom styling. */
  className: _react.PropTypes.string,

  /** Icon can formatted to appear circular */
  circular: _react.PropTypes.bool,

  /** Color of the icon. */
  color: _react.PropTypes.oneOf(Icon._meta.props.color),

  /** Icons can display a smaller corner icon */
  corner: _react.PropTypes.bool,

  /** Show that the icon is inactive */
  disabled: _react.PropTypes.bool,

  /** Fitted, without space to left or right of Icon. */
  fitted: _react.PropTypes.bool,

  /** Icon can flipped */
  flipped: _react.PropTypes.oneOf(Icon._meta.props.flipped),

  /** Formatted to have its colors inverted for contrast */
  inverted: _react.PropTypes.bool,

  /** Name of the icon */
  name: _react.PropTypes.string,

  /** Icon can be formatter as a link */
  link: _react.PropTypes.bool,

  /** Icon can be used as a simple loader */
  loading: _react.PropTypes.bool,

  /** Icon can rotated */
  rotated: _react.PropTypes.oneOf(Icon._meta.props.rotated),

  /** Size of the icon. */
  size: _react.PropTypes.oneOf(Icon._meta.props.size)
};

exports.default = Icon;