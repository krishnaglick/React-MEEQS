'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Meta = require('../../utils/Meta');

var _Meta2 = _interopRequireDefault(_Meta);

var _propUtils = require('../../utils/propUtils');

var _semanticUtils = require('../../utils/semanticUtils');

var sui = _interopRequireWildcard(_semanticUtils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A container limits content to a maximum width
 */
function Container(props) {
  var text = props.text;
  var aligned = props.aligned;
  var fluid = props.fluid;
  var children = props.children;
  var className = props.className;


  var classes = (0, _classnames2.default)('ui', (0, _propUtils.useKeyOnly)(text, 'text'), (0, _propUtils.useAlignedProp)(aligned), (0, _propUtils.useKeyOnly)(fluid, 'fluid'), 'container', className);

  var rest = (0, _propUtils.getUnhandledProps)(Container, props);

  return _react2.default.createElement(
    'div',
    _extends({ className: classes }, rest),
    children
  );
}

Container._meta = {
  library: _Meta2.default.library.semanticUI,
  name: 'Container',
  type: _Meta2.default.type.element,
  props: {
    aligned: sui.textAlignments
  }
};

Container.propTypes = {
  /** Primary content of the Container */
  children: _react.PropTypes.node,

  /** Classes to add to the container className. */
  className: _react.PropTypes.string,

  /** Reduce maximum width to more naturally accommodate text */
  text: _react.PropTypes.bool,

  /** Align container text */
  aligned: _react.PropTypes.oneOf(Container._meta.props.aligned),

  /** Container has no maximum with */
  fluid: _react.PropTypes.bool
};

exports.default = Container;