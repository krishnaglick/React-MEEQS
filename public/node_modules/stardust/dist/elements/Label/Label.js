'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Meta = require('../../utils/Meta');

var _Meta2 = _interopRequireDefault(_Meta);

var _semanticUtils = require('../../utils/semanticUtils');

var sui = _interopRequireWildcard(_semanticUtils);

var _childrenUtils = require('../../utils/childrenUtils');

var _propUtils = require('../../utils/propUtils');

var _Icon = require('../Icon/Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Image = require('../Image/Image');

var _Image2 = _interopRequireDefault(_Image);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A label displays content classification
 */
function Label(props) {
  var attached = props.attached;
  var basic = props.basic;
  var children = props.children;
  var color = props.color;
  var corner = props.corner;
  var className = props.className;
  var circular = props.circular;
  var detail = props.detail;
  var detailLink = props.detailLink;
  var floating = props.floating;
  var horizontal = props.horizontal;
  var icon = props.icon;
  var image = props.image;
  var link = props.link;
  var onClick = props.onClick;
  var onDetailClick = props.onDetailClick;
  var onRemove = props.onRemove;
  var pointing = props.pointing;
  var removable = props.removable;
  var ribbon = props.ribbon;
  var size = props.size;
  var tag = props.tag;
  var text = props.text;


  var handleClick = function handleClick(e) {
    return onClick && onClick(e, props);
  };
  var handleRemove = function handleRemove(e) {
    return onRemove && onRemove(e, props);
  };
  var handleDetailClick = function handleDetailClick(e) {
    return onDetailClick && onDetailClick(e, props);
  };

  var classes = (0, _classnames2.default)('ui', size, color, (0, _propUtils.useKeyOnly)(basic, 'basic'), (0, _propUtils.useKeyOnly)(floating, 'floating'), (0, _propUtils.useKeyOnly)(horizontal, 'horizontal'), (0, _propUtils.useKeyOnly)(tag, 'tag'), (0, _propUtils.useValueAndKey)(attached, 'attached'), (0, _propUtils.useKeyOrValueAndKey)(corner, 'corner'), (0, _propUtils.useKeyOrValueAndKey)(pointing, 'pointing'), (0, _propUtils.useKeyOrValueAndKey)(ribbon, 'ribbon'), circular && (children && 'circular' || 'empty circular'),
  // TODO how to handle image child with no image class? there are two image style labels.
  (image || (0, _childrenUtils.someChildType)(children, _Image2.default) || (0, _childrenUtils.someChildType)(children, 'img')) && 'image', 'label', className);

  var DetailComponent = (detailLink || onDetailClick) && 'a' || 'div';

  var LabelComponent = image || link || onClick ? 'a' : 'div';
  var rest = (0, _propUtils.getUnhandledProps)(Label, props);

  return _react2.default.createElement(
    LabelComponent,
    _extends({ className: classes, onClick: handleClick }, rest),
    (0, _propUtils.iconPropRenderer)(icon),
    (0, _propUtils.imagePropRenderer)(image),
    text,
    children,
    detail && _react2.default.createElement(
      DetailComponent,
      { className: 'detail', onClick: handleDetailClick },
      detail
    ),
    (removable || onRemove) && _react2.default.createElement(_Icon2.default, { name: 'delete', onClick: handleRemove })
  );
}

Label._meta = {
  library: _Meta2.default.library.semanticUI,
  name: 'Label',
  type: _Meta2.default.type.element,
  props: {
    attached: ['top', 'bottom', 'top right', 'top left', 'bottom left', 'bottom right'],
    size: sui.sizes,
    color: sui.colors,
    pointing: ['bottom', 'left', 'right'],
    corner: ['left', 'right'],
    ribbon: ['right']
  }
};

Label.propTypes = {
  /** Attach to a <Segment />. */
  attached: _react.PropTypes.oneOf(Label._meta.props.attached),

  /** A label can reduce its complexity. */
  basic: _react.PropTypes.bool,

  /** Primary content of the label, same as text. */
  children: _react.PropTypes.node,

  /** Classes to add to the label className. */
  className: _react.PropTypes.string,

  /** Color of the label. */
  color: _react.PropTypes.oneOf(Label._meta.props.colors),

  /** Place the label in one of the upper corners. */
  corner: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.oneOf(Label._meta.props.corner)]),

  /** Additional text with less emphasis. */
  detail: _react.PropTypes.string,

  /** Format the detail as a link. */
  detailLink: _react.PropTypes.string,

  /** Format a label to align better alongside text. */
  horizontal: _react.PropTypes.bool,

  /** Float above another element in the upper right corner. */
  floating: _react.PropTypes.bool,

  /** Make the label circular, or a dot if it is empty. */
  circular: _react.PropTypes.bool,

  /** Add an icon by icon name or pass an <Icon /> */
  icon: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]),

  /** Add an image by img src or pass an <Image />. */
  image: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]),

  /** Format the label as a link on hover. */
  link: _react.PropTypes.bool,

  /** Adds the link style when present, called with (event, props). */
  onClick: _react.PropTypes.func,

  /** Click callback for detail, called with (event, props). Formats the detail as a link. */
  onDetailClick: _react.PropTypes.func,

  /** Adds an "x" icon, called with (event, props) when "x" is clicked. */
  onRemove: _react.PropTypes.func,

  /** Add an "x" icon that calls onRemove when clicked. */
  removable: _react.PropTypes.bool,

  /** Point to content next to it. */
  pointing: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.oneOf(Label._meta.props.pointing)]),

  /** Format the label as a ribbon on another component. */
  ribbon: _react.PropTypes.oneOf(Label._meta.props.ribbon),

  /** Size of the label. */
  size: _react.PropTypes.oneOf(Label._meta.props.sizes),

  /** Format the label like a product tag. */
  tag: _react.PropTypes.bool,

  /** Primary text of the label, same as children. */
  text: _react.PropTypes.node
};

exports.default = Label;