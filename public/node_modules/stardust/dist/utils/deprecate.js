'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deprecateComponent = exports.deprecateProps = undefined;

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Show a deprecated warning for component props.
 * @param {object} context A reference to the component instance (`this`).
 * @param {object} deprecated Keys/values are deprecated props/warning messages.
 *   The component name and "is deprecated" is automatically added.
 *   Only add help messages as values.
 */
var deprecateProps = exports.deprecateProps = function deprecateProps(context, deprecated) {
  if (process.env.NODE_ENV === 'production') return;
  var warnings = (0, _pick3.default)(deprecated, (0, _keys3.default)(context.props));
  (0, _each3.default)(warnings, function (val, key) {
    console.warn('Stardust ' + context.constructor.name + ' prop "' + key + '" is deprecated. ' + val);
  });
};

/**
 * Show a deprecated warning for Stardust components.
 * @param {String} name Name of the component being deprecated.
 * @param {String} warning Message to display to the user.
 * @param {String} Replacement Component to be returned in its place.
 * @returns {DeprecatedComponent}
 */
/* eslint-disable no-console */
var deprecateComponent = exports.deprecateComponent = function deprecateComponent(name, warning, Replacement) {
  return function (_Replacement) {
    _inherits(DeprecatedComponent, _Replacement);

    function DeprecatedComponent() {
      var _Object$getPrototypeO;

      _classCallCheck(this, DeprecatedComponent);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var _this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(DeprecatedComponent)).call.apply(_Object$getPrototypeO, [this].concat(args)));

      console.warn(warning ? 'Stardust component "' + name + '" is deprecated. ' + warning : '"' + name + '" will be removed in future versions. ' + warning);
      return _this;
    }

    return DeprecatedComponent;
  }(Replacement);
};