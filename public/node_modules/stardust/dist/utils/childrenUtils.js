'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapChildType = exports.filterChildType = exports.findChildType = exports.someChildType = exports.filterChildren = exports.findChild = exports.someChild = undefined;

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _filter2 = require('lodash/filter');

var _filter3 = _interopRequireDefault(_filter2);

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _some2 = require('lodash/some');

var _some3 = _interopRequireDefault(_some2);

var _react = require('react');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// ----------------------------------------
// Lodash methods for children
// ----------------------------------------
/**
 * _.some for props.children.
 * @param {Object} children The children prop of a component.
 * @param {Array|Function|Object|string} iteratee The function invoked per iteration.
 * @returns {Boolean}
 */
var someChild = exports.someChild = function someChild(children, iteratee) {
  return (0, _some3.default)(_react.Children.toArray(children), iteratee);
};

/**
 * _.find for props.children.
 * @param {Object} children The children prop of a component.
 * @param {Array|Function|Object|string} iteratee The function invoked per iteration.
 * @returns {undefined|Object}
 */
var findChild = exports.findChild = function findChild(children, iteratee) {
  return (0, _find3.default)(_react.Children.toArray(children), iteratee);
};

/**
 * _.filter for props.children.
 * @param {Object} children The children prop of a component.
 * @param {Array|Function|Object|string} iteratee The function invoked per iteration.
 * @returns {Array}
 */
var filterChildren = exports.filterChildren = function filterChildren(children, iteratee) {
  return (0, _filter3.default)(_react.Children.toArray(children), iteratee);
};

// ----------------------------------------
// By Type
// ----------------------------------------
/**
 * Determine if child by type exists in children.
 * @param {Object} children The children prop of a component.
 * @param {string|Function} type An html tag name string or React component.
 * @returns {Boolean}
 */
var someChildType = exports.someChildType = function someChildType(children, type) {
  return someChild(children, { type: type });
};

/**
 * Find child by type.
 * @param {Object} children The children prop of a component.
 * @param {string|Function} type An html tag name string or React component.
 * @returns {undefined|Object}
 */
var findChildType = exports.findChildType = function findChildType(children, type) {
  return findChild(children, { type: type });
};

/**
 * _.filter for props.children by child type.
 * @param {Object} children The children prop of a component.
 * @param {string|Function} type An html tag name string or React component.
 * @returns {Array}
 */
var filterChildType = exports.filterChildType = function filterChildType(children, type) {
  return filterChildren(children, { type: type });
};

/**
 * _.map over children of a specific type.
 * @param {Object} children The children prop of a component.
 * @param {string|Function} type An html tag name string or React component.
 * @param {Array|Function|Object|string} iteratee The function invoked per iteration.
 * @returns {Array}
 */
var mapChildType = exports.mapChildType = function mapChildType(children, type, iteratee) {
  return (0, _map3.default)(filterChildren(children, { type: type }), iteratee);
};