'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _debug = void 0;
var noop = function noop() {
  return undefined;
};

if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {
  _debug = require('debug');
  // Safari private mode throws when writing to localStorage
  // https://github.com/TechnologyAdvice/stardust/issues/332
  try {
    if ((typeof localStorage === 'undefined' ? 'undefined' : _typeof(localStorage)) === 'object') localStorage.debug = localStorage.debug || 'stardust:*';
  } catch (err) {
    /* eslint-disable no-console */
    console.log('Stardust debug disabled. Could not write to localStorage.', err);
    /* eslint-enable no-console */
  }
} else {
  _debug = function _debug() {
    return noop;
  };
}

/**
 * Create a namespaced debug function.
 * @param {String} namespace Usually a component name.
 * @example
 * import { makeDebugger } from 'src/lib'
 * const debug = makeDebugger('namespace')
 *
 * debug('Some message')
 * @returns {Function}
 */
var makeDebugger = exports.makeDebugger = function makeDebugger(namespace) {
  return _debug('stardust:' + namespace);
};

/**
 * Default debugger, simple log.
 * @example
 * import { debug } from 'src/lib'
 * debug('Some message')
 */
var debug = exports.debug = makeDebugger('log');