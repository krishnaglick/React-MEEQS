'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _AutoControlledComponent = require('../../utils/AutoControlledComponent');

var _AutoControlledComponent2 = _interopRequireDefault(_AutoControlledComponent);

var _Meta = require('../../utils/Meta');

var _Meta2 = _interopRequireDefault(_Meta);

var _debug = require('../../utils/debug');

var _propUtils = require('../../utils/propUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = (0, _debug.makeDebugger)('checkbox');

// maps checkbox types to input types
var typeMap = {
  checkbox: 'checkbox',
  radio: 'radio',
  slider: 'checkbox',
  toggle: 'checkbox'
};

var _meta = {
  library: _Meta2.default.library.semanticUI,
  name: 'Checkbox',
  type: _Meta2.default.type.module,
  props: {
    inputType: ['checkbox', 'radio'],
    type: ['checkbox', 'radio', 'slider', 'toggle']
  }
};

/**
 * A checkbox allows a user to select a value from a small set of options, often binary
 * @see Radio
 */

var Checkbox = function (_AutoControlledCompon) {
  _inherits(Checkbox, _AutoControlledCompon);

  function Checkbox() {
    var _Object$getPrototypeO;

    var _temp, _this, _ret;

    _classCallCheck(this, Checkbox);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(Checkbox)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.state = {}, _this.handleClick = function (e) {
      debug('handleClick()');
      var _this$props = _this.props;
      var disabled = _this$props.disabled;
      var onChange = _this$props.onChange;
      var onClick = _this$props.onClick;
      var name = _this$props.name;
      var readOnly = _this$props.readOnly;
      var value = _this$props.value;
      // using a ref here allows us to let the browser manage radio group state for us
      // this is a special exception where we are reading state from the DOM
      // otherwise, all radio groups would have to be controlled components

      var refChecked = (0, _get3.default)(_this.refs, 'input.checked');
      debug('  name:       ' + name);
      debug('  value:      ' + value);
      debug('  refChecked: ' + refChecked);

      if (onClick) onClick(e, { name: name, value: value, checked: !!refChecked });
      if (onChange) onChange(e, { name: name, value: value, checked: !refChecked });

      if (!disabled && !readOnly) {
        _this.trySetState({ checked: !refChecked });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Checkbox, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var className = _props.className;
      var inputType = _props.inputType;
      var label = _props.label;
      var name = _props.name;
      var onChange = _props.onChange;
      var type = _props.type;
      var value = _props.value;
      var checked = this.state.checked;

      var classes = (0, _classnames2.default)('ui',
      // don't add duplicate "checkbox" classes, but add any other type
      type !== 'checkbox' && type,
      // auto apply fitted class to compact white space when there is no label
      // http://semantic-ui.com/modules/checkbox.html#fitted
      !label && 'fitted', checked && 'checked', 'checkbox', className);
      var rest = (0, _propUtils.getUnhandledProps)(Checkbox, this.props);
      // Heads Up!
      // onChange props are never called as the user cannot click on the hidden input.
      // We call onChange in the onClick handler.
      // This exists only to prevent React "prop checked without onChange" warnings.
      return _react2.default.createElement(
        'div',
        _extends({}, rest, {
          className: classes,
          onClick: this.handleClick,
          onChange: onChange || _noop3.default
        }),
        _react2.default.createElement('input', {
          ref: 'input',
          type: inputType || typeMap[type],
          name: name,
          onChange: onChange || _noop3.default,
          checked: checked,
          className: 'hidden',
          tabIndex: 0,
          value: value
        }),
        _react2.default.createElement(
          'label',
          null,
          label
        )
      );
    }
  }]);

  return Checkbox;
}(_AutoControlledComponent2.default);

Checkbox.propTypes = {
  className: _react.PropTypes.string,

  /** Whether or not checkbox is checked. */
  checked: _react.PropTypes.bool,

  /** The initial value of checked. */
  defaultChecked: _react.PropTypes.bool,

  /** Removes padding for a label. Auto applied when there is no label. */
  fitted: _react.PropTypes.bool,

  /** The text of the associated label element. */
  label: _react.PropTypes.string,

  /** HTML input type, either checkbox or radio. */
  inputType: _react.PropTypes.oneOf(_meta.props.inputType),

  /** Called with (event, { name, value, checked }) when the checkbox or label is clicked. */
  onClick: _react.PropTypes.func,

  /**
   * Display as a checkbox, radio, slider, or toggle.
   * The input type is `checkbox` for both slider and toggle types.
   * You can set `inputType` separately to mix and match appearance and behavior.
   */
  type: _react.PropTypes.oneOf(_meta.props.type),

  /** The HTML input name. */
  name: _react.PropTypes.string,

  /** The HTML input value. */
  value: _react.PropTypes.string,

  /** Called with (event, { name, value, checked }) when the user attempts to change the value. */
  onChange: _react.PropTypes.func
};
Checkbox.defaultProps = {
  type: 'checkbox'
};
Checkbox.autoControlledProps = ['checked'];
Checkbox._meta = _meta;
exports.default = Checkbox;