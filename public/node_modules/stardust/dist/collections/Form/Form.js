'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _invoke2 = require('lodash/invoke');

var _invoke3 = _interopRequireDefault(_invoke2);

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Meta = require('../../utils/Meta');

var _Meta2 = _interopRequireDefault(_Meta);

var _propUtils = require('../../utils/propUtils');

var _deprecate = require('../../utils/deprecate');

var _FormField = require('./FormField');

var _FormField2 = _interopRequireDefault(_FormField);

var _FormFields = require('./FormFields');

var _FormFields2 = _interopRequireDefault(_FormFields);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Form = function (_Component) {
  _inherits(Form, _Component);

  function Form(props, context) {
    _classCallCheck(this, Form);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Form).call(this, props, context));

    _this.serializeJson = function () {
      var form = _this.refs.element;
      var json = {};

      (0, _each3.default)(['input', 'textarea', 'select'], function (tag) {
        (0, _each3.default)(form.getElementsByTagName(tag), function (node, index, arr) {
          var name = node.getAttribute('name');

          switch (node.getAttribute('type')) {
            case 'checkbox':
              json[name] = { checked: node.checked };
              break;

            case 'radio':
              json[name] = {
                value: (0, _find3.default)(arr, { name: name, checked: true }).value
              };
              break;

            default:
              json[name] = { value: node.value };
              break;
          }
        });
      });

      return json;
    };

    (0, _deprecate.deprecateProps)(_this, {
      settings: 'Use a separate prop for each setting.'
    });
    return _this;
  }

  _createClass(Form, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.refresh();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      this.refresh();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      (0, _invoke3.default)(this, 'element.off');
    }
  }, {
    key: 'plugin',
    value: function plugin() {
      var _element;

      return (_element = this.element).form.apply(_element, arguments);
    }
  }, {
    key: 'refresh',
    value: function refresh() {
      this.element = (0, _jquery2.default)(this.refs.element);
      this.element.form((0, _pick3.default)(this.props, ['keyboardShortcuts',
      // validation
      'delay', 'duration', 'fields', 'on', 'inline', 'revalidate', 'transition',
      // callbacks
      'onValid', 'onInvalid', 'onSuccess', 'onFailure']));
    }
  }, {
    key: 'render',
    value: function render() {
      var classes = (0, _classnames2.default)('ui', this.props.className, 'form');
      var props = (0, _propUtils.getUnhandledProps)(Form, this.props);
      return _react2.default.createElement(
        'form',
        _extends({}, props, { className: classes, ref: 'element' }),
        this.props.children
      );
    }
  }]);

  return Form;
}(_react.Component);

Form.propTypes = {
  children: _react.PropTypes.node,
  className: _react.PropTypes.string,
  settings: _react.PropTypes.shape({
    on: _react.PropTypes.string,
    inline: _react.PropTypes.bool,
    fields: _react.PropTypes.object
  }),

  // form settings
  keyboardShortcuts: _react.PropTypes.bool,
  on: _react.PropTypes.oneOf(['blur', 'change', 'submit']),
  revalidate: _react.PropTypes.bool,
  delay: _react.PropTypes.bool,
  inline: _react.PropTypes.bool,
  transition: _react.PropTypes.string,
  duration: _react.PropTypes.number,
  // callbacks
  onValid: _react.PropTypes.func,
  onInvalid: _react.PropTypes.func,
  onSuccess: _react.PropTypes.func,
  onFailure: _react.PropTypes.func,
  fields: _react.PropTypes.object
};
Form.defaultProps = {
  // prevent submit by default
  // https://github.com/Semantic-Org/Semantic-UI/issues/546
  onSuccess: function onSuccess() {
    return false;
  }
};
Form._meta = {
  library: _Meta2.default.library.semanticUI,
  name: 'Form',
  type: _Meta2.default.type.collection
};
Form.Field = _FormField2.default;
Form.Fields = _FormFields2.default;
exports.default = Form;